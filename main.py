import logging
import os
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv
from memory import ConversationMemory

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

logging.basicConfig(level=logging.INFO)

memory = ConversationMemory(max_messages=5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤. –Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ —É—á–µ–Ω–∏–∫–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –æ–±—É—á–µ–Ω–∏—è: üë©‚Äçüè´ –Ø –ø–æ–º–æ–≥—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é: –±—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è, —Ç–µ–∫—Å—Ç—ã –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –æ–±—ä—è—Å–Ω—è—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–∏—Å—å–º–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∏ –¥–∞–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –≥–æ—Ç–æ–≤–∏—Ç—å –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º, —Ç–∞–∫–∏–º –∫–∞–∫ IELTS –∏–ª–∏ TOEFL, –∏–∑–±–∞–≤–ª—è—Ç—å—Å—è –æ—Ç —Ä—É—Ç–∏–Ω—ã ‚Äî —á—Ç–æ–±—ã –≤—ã –∑–∞–Ω–∏–º–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ–º. üë®‚Äçüéì –Ø –ø–æ–º–æ–≥—É —É—á–µ–Ω–∏–∫—É: –ø–æ–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –∏ –ø—Ä–∞–≤–∏–ª–∞,  –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ, –≥–æ–≤–æ—Ä–µ–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–≤–æ–∏–º —ç—Å—Å–µ –∏ –æ—Ç–≤–µ—Ç–∞–º, –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º –∏ —ç–∫–∑–∞–º–µ–Ω–∞–º. üí° –Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π:")



async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.chat.send_action(action="typing")
        user_message = update.message.text
        user_id = update.message.from_user.id

        memory.add_message(user_id, "user", user_message)

        conversation = memory.get_conversation(user_id)

        logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ GPT: {conversation}")

        response = openai.ChatCompletion.create(
            model="gpt-4o",  # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–æ–¥–µ–ª–∏
            messages=conversation
        )
        logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç GPT: {response}")

        reply = response["choices"][0]["message"]["content"]

        memory.add_message(user_id, "assistant", reply)

        await update.message.reply_text(reply)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    port = int(os.getenv("PORT", 8000))
    print(f"Webhook URL: {WEBHOOK_URL}")
    print(f"Port: {os.getenv('PORT')}")
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path="webhook",
        webhook_url=WEBHOOK_URL,
    )

if __name__ == "__main__":
    main()
