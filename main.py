import logging
import os
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv
from memory import ConversationMemory

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

openai.api_key = OPENAI_API_KEY
logging.basicConfig(level=logging.INFO)

memory = ConversationMemory(max_messages=5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ. –ù–∞–ø–∏—à–∏ –º–Ω–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:\n/mode_ielts\n/mode_grammar\n/mode_reset")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.chat.send_action(action="typing")
        user_message = update.message.text
        user_id = update.message.from_user.id

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å
        memory.add_message(user_id, "user", user_message)

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        conversation = memory.get_conversation(user_id)
        messages = [{"role": role, "content": content} for role, content in conversation]

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mode = context.user_data.get("mode", None)

        if mode == "ielts":
            system_prompt = (
                "–¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ IELTS. "
                "–¢—ã —Å–æ–∑–¥–∞—ë—à—å –∑–∞–¥–∞–Ω–∏—è, –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å –ø–∏—Å—å–º–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º IELTS, "
                "–¥–∞—ë—à—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ –ø–æ–º–æ–≥–∞–µ—à—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏."
            )
        elif mode == "grammar":
            system_prompt = (
                "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. "
                "–¢—ã –æ–±—ä—è—Å–Ω—è–µ—à—å –ø—Ä–∞–≤–∏–ª–∞, –∏—Å–ø—Ä–∞–≤–ª—è–µ—à—å –æ—à–∏–±–∫–∏ –∏ —Å–æ–∑–¥–∞—ë—à—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è."
            )
        else:
            system_prompt = (
                "–¢—ã ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ. "
                "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏, –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏ –∏ –ø–æ–¥–±–æ—Ä–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —É—Ä–æ–∫–æ–≤."
            )

        messages.insert(0, {"role": "system", "content": system_prompt})

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ GPT: {messages}")

        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç GPT: {response}")

        # –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        reply = response["choices"][0]["message"]["content"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å
        memory.add_message(user_id, "assistant", reply)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(reply)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥—ã —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
async def set_mode_ielts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode"] = "ielts"
    await update.message.reply_text("‚úÖ –†–µ–∂–∏–º IELTS –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")

async def set_mode_grammar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode"] = "grammar"
    await update.message.reply_text("‚úÖ –†–µ–∂–∏–º –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")

async def reset_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode"] = None
    await update.message.reply_text("üîÅ –†–µ–∂–∏–º —Å–±—Ä–æ—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—â–∏–π –ø–æ–º–æ—â–Ω–∏–∫.")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("mode_ielts", set_mode_ielts))
    app.add_handler(CommandHandler("mode_grammar", set_mode_grammar))
    app.add_handler(CommandHandler("mode_reset", reset_mode))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    port = int(os.getenv("PORT", 8000))
    print(f"Webhook URL: {WEBHOOK_URL}")
    print(f"Port: {os.getenv('PORT')}")
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path="webhook",
        webhook_url=WEBHOOK_URL,
    )

if __name__ == "__main__":
    main()
